version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 18

  pre_build:
    commands:
      - echo "Logging into AWS ECR"
      - aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
      - echo "Image tag set to - $IMAGE_TAG"
      - |
          if ! aws ecr describe-repositories --repository-names "cdk-debug-env-$ISSUE_NUMBER" --region $AWS_REGION >/dev/null 2>&1; then
            echo "Creating ECR repository: cdk-debug-env-$ISSUE_NUMBER"
            aws ecr create-repository --repository-name "cdk-debug-env-$ISSUE_NUMBER" --region $AWS_REGION
          else
            echo "ECR repository already exists: cdk-debug-env-$ISSUE_NUMBER"
          fi

  build:
    commands:
      - echo "Building CDK Issue Debug Env for Issue $ISSUE_NUMBER"

      # Prepare workspace
      - mkdir -p /workspace/aws-cdk /workspace/cdk-app /workspace/issue-app

      # Clone AWS CDK Repository
      - |
          if [ ! -d "/workspace/aws-cdk/.git" ]; then
            echo "Cloning AWS CDK repository..."
            git clone https://github.com/aws/aws-cdk.git /workspace/aws-cdk
          else
            echo "AWS CDK repository already exists."
          fi

      # Read CDK version from issue metadata
      - |
          if [ ! -z "$ISSUE_METADATA" ]; then 
            echo "$ISSUE_METADATA" > /workspace/issue-app/issue-metadata.txt
          fi
          LATEST_CDK_VERSION=$(grep -oP 'aws-cdk-lib@\K[0-9]+\.[0-9]+\.[0-9]+' /workspace/cdk-app/issue-metadata.txt || echo "latest")
          echo "Installing AWS CDK version $LATEST_CDK_VERSION"

      # Initialize CDK App
      - echo "Initializing CDK App..."
      - npm install -g aws-cdk
      - cd /workspace/cdk-app
      - cdk init app --language=typescript

      # Create the setup script dynamically
      - |
          cat <<'EOF' > /workspace/setup.sh
          #!/bin/bash
          echo "Setting up the AWS CDK Issue Environment..."

          # Ensure AWS CLI is configured
          if ! aws sts get-caller-identity >/dev/null 2>&1; then
            echo "AWS credentials not found. Ensure ~/.aws is mounted."
            exit 1
          fi

          echo "Issue environment setup complete!"
          exec /bin/bash  # Keep container open for interactive debugging
          EOF

      # Ensure script permissions
      - chmod +x /workspace/setup.sh
      - echo "setup.sh created successfully"

      # Prepare Dockerfile
      - |
          cat <<EOF > /workspace/Dockerfile
          FROM public.ecr.aws/docker/library/node:18

          RUN apt-get update && apt-get install -y git unzip python3-pip awscli jq

          WORKDIR /workspace

          ENV AWS_REGION=$AWS_REGION
          ENV AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID
          ENV GITHUB_TOKEN=$GITHUB_TOKEN
          
          # Copy the cloned AWS CDK repo
          COPY aws-cdk /workspace/aws-cdk/

          # Copy the initialized CDK app
          COPY cdk-app /workspace/cdk-app/

          # Copy the setup script
          COPY setup.sh /workspace/

          RUN chmod +x /workspace/setup.sh

          CMD ["/workspace/setup.sh"]
          EOF

      - echo "Dockerfile created successfully"

      # Build and push Docker image
      - echo "Building docker image - $IMAGE_TAG"
      - cd /workspace
      - docker build -t "$IMAGE_TAG" .
      - docker push "$IMAGE_TAG"

  post_build:
    commands:
      - echo "Docker Image Pushed - $IMAGE_TAG"
